# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-08-15 19:50
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('people', '__first__'),
        ('sections', '__first__'),
        ('regions', '__first__'),
        ('tags', '__first__'),
        ('pieces', '__first__'),
        ('bands', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(help_text='Name of Contest', max_length=100)),
                ('slug', models.SlugField()),
                ('description', models.TextField(blank=True)),
                ('ordering', models.IntegerField(default=0, help_text='Order to show contest in group.  Higher numbers are later in the list')),
                ('hashtag', models.CharField(blank=True, max_length=25, null=True)),
                ('contact_info', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('extinct', models.BooleanField(default=False, help_text='This marks the contest as one that is no longer run')),
                ('exclude_from_group_results', models.BooleanField(default=False, help_text='If true, this contest is not included in total points calculated from the group (ie Overall Whit Friday)')),
                ('all_events_added', models.BooleanField(default=False, help_text='This hides the prompt to add more results if contest extinct')),
                ('period', models.IntegerField(blank=True, help_text='Number of years this contest repeats over.  If this is non null, allows contests between 14 months and 60 months to be included in current champions', null=True)),
                ('prevent_future_bands', models.BooleanField(default=False, help_text='If true, prevents bands being added to the contest event whilst it is still in the future')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContestAchievementAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('band_name', models.CharField(blank=True, max_length=100, null=True)),
                ('year_of_award', models.CharField(max_length=255)),
                ('award', models.CharField(max_length=30)),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bands.Band')),
                ('conductor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='people.Person')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
            ],
            options={
                'ordering': ['-year_of_award'],
            },
        ),
        migrations.CreateModel(
            name='ContestAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(help_text='Name of Contest', max_length=100)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestAliasLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestAliasOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Contest aliases',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContestEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('date_of_event', models.DateField()),
                ('date_resolution', models.CharField(choices=[('D', 'Exact Date'), ('M', 'Month and Year'), ('Y', 'Year')], default='D', max_length=1)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('complete', models.BooleanField(default=False, help_text='Complete means stop prompting with "add more results"')),
                ('no_contest', models.BooleanField(default=False, help_text='Set to true if no contest took place this year')),
                ('requires_input', models.BooleanField(default=False, help_text='There is data to input from scanned programme pages')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
            ],
            options={
                'ordering': ['-date_of_event', 'contest__group'],
            },
        ),
        migrations.CreateModel(
            name='ContestEventWeblink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(max_length=255)),
                ('website', models.CharField(max_length=255)),
                ('order', models.IntegerField(default=10)),
                ('contest_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestEvent')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestEventWeblinkLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestEventWeblinkOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['contest_event'],
            },
        ),
        migrations.CreateModel(
            name='ContestGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(help_text='Name of Contest Group', max_length=100)),
                ('slug', models.SlugField()),
                ('group_type', models.CharField(choices=[('S', 'Simple'), ('W', 'Whit Friday')], default='S', max_length=1)),
                ('notes', models.TextField(blank=True, null=True)),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupOwner', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='tags.ContestTag')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContestGroupAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(help_text='Name of Contest Group', max_length=100)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestGroup')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupAliasLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupAliasOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Contest Group aliases',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContestGroupLinkEventLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contests.Contest')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contests.ContestEvent')),
            ],
        ),
        migrations.CreateModel(
            name='ContestGroupWeblink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(max_length=255)),
                ('website', models.CharField(max_length=255)),
                ('order', models.IntegerField(default=10)),
                ('contest_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestGroup')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupWeblinkLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupWeblinkOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['contest_group'],
            },
        ),
        migrations.CreateModel(
            name='ContestProgrammeCover',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('event_date', models.DateField(help_text='Date of Event, DD/MM/YYYY')),
                ('image', models.ImageField(upload_to='programme_cover/%Y')),
                ('contest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='contests.Contest')),
                ('contest_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='contests.ContestGroup')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestProgrammeCoverLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestProgrammeCoverOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['contest_group', 'contest', 'event_date'],
            },
        ),
        migrations.CreateModel(
            name='ContestProgrammePage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('number', models.IntegerField(default=1)),
                ('image', models.ImageField(upload_to='programme_page/%Y')),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('cover', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestProgrammeCover')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestProgrammePageLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestProgrammePageOwner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('results_position', models.IntegerField(help_text='Position at contest, or 9999 for Unknown, 10000 for Disqualified, 10001 for Withdrawn')),
                ('band_name', models.CharField(max_length=100)),
                ('draw', models.IntegerField(default=0, help_text='Draw for order of play')),
                ('draw_second_part', models.IntegerField(blank=True, help_text='Draw for the second part of the contest, if any', null=True)),
                ('points', models.CharField(blank=True, help_text='Total points the band were awarded for this contest', max_length=100, null=True)),
                ('points_first_part', models.CharField(blank=True, help_text='Points for first part, ie playing mark or test piece section', max_length=10, null=True)),
                ('points_second_part', models.CharField(blank=True, help_text='Points for second part, ie entertainment mark or entertainments section', max_length=10, null=True)),
                ('points_third_part', models.CharField(blank=True, help_text='Points for third part', max_length=10, null=True)),
                ('points_fourth_part', models.CharField(blank=True, help_text='Points for fourth part', max_length=10, null=True)),
                ('penalty_points', models.CharField(blank=True, help_text='Penalty points to take off the band', max_length=10, null=True)),
                ('conductor_name', models.CharField(blank=True, help_text='Originally entered conductor name', max_length=100, null=True)),
                ('notes', models.TextField(blank=True)),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bands.Band')),
                ('contest_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestEvent')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestResultLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('original_owner', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ContestResultOriginalOwner', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ContestResultOwner', to=settings.AUTH_USER_MODEL)),
                ('person_conducting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='people.Person')),
                ('second_person_conducting', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='SecondPersonConductor', to='people.Person')),
                ('test_piece', models.ForeignKey(blank=True, help_text='(Own choice contest only)', null=True, on_delete=django.db.models.deletion.PROTECT, to='pieces.TestPiece')),
            ],
            options={
                'ordering': ['-contest_event__date_of_event', 'results_position', 'draw', 'band__name'],
            },
        ),
        migrations.CreateModel(
            name='ContestTalkPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('text', models.TextField()),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestTalkPageLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('object_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestTalkPageOwner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContestTestPiece',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('and_or', models.CharField(choices=[('and', 'and'), ('or', 'or')], default='and', max_length=5)),
                ('contest_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestEvent')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestTestPieceLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestTestPieceOwner', to=settings.AUTH_USER_MODEL)),
                ('test_piece', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pieces.TestPiece')),
            ],
            options={
                'verbose_name': 'Additional Contest Test Piece',
                'verbose_name_plural': 'Additional Contest Test Pieces',
            },
        ),
        migrations.CreateModel(
            name='ContestType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(max_length=100)),
                ('first_draw', models.CharField(default='Draw', help_text='Title for first draw field', max_length=20)),
                ('second_draw', models.CharField(blank=True, help_text='Title for second draw field', max_length=20)),
                ('total_points', models.CharField(default='Points', help_text='Title for total points field', max_length=20)),
                ('points_one', models.CharField(blank=True, help_text='Title for first split points field', max_length=20)),
                ('points_two', models.CharField(blank=True, help_text='Title for first split points field', max_length=20)),
                ('points_three', models.CharField(blank=True, help_text='Title for first split points field', max_length=20)),
                ('points_four', models.CharField(blank=True, help_text='Title for first split points field', max_length=20)),
                ('penalty_points', models.CharField(blank=True, help_text='Title for penalty points field', max_length=20)),
                ('test_piece', models.BooleanField(default=True, help_text='Contest has set test piece')),
                ('own_choice', models.BooleanField(default=False, help_text='Contest has own choice test piece')),
                ('entertainments', models.BooleanField(default=False, help_text='Contest has entertainments part')),
                ('statistics', models.BooleanField(default=False, help_text='Show Adjudicator A/B/C Statistics')),
                ('statistics_limit', models.IntegerField(default=2, help_text='Number of points fields to use for stats')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestTypeLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestTypeOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContestWeblink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(max_length=255)),
                ('website', models.CharField(max_length=255)),
                ('order', models.IntegerField(default=10)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestWeblinkLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestWeblinkOwner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['contest'],
            },
        ),
        migrations.CreateModel(
            name='CurrentChampion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bands.Band')),
                ('conductor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='people.Person')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Contest')),
                ('contest_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestEvent')),
            ],
        ),
        migrations.CreateModel(
            name='GroupTalkPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('text', models.TextField()),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupTalkPageLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('object_link', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestGroup')),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestGroupTalkPageOwner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResultPiecePerformance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('suffix', models.CharField(blank=True, max_length=100, null=True)),
                ('ordering', models.IntegerField()),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ResultPiecePerformanceLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ResultPiecePerformanceOwner', to=settings.AUTH_USER_MODEL)),
                ('piece', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pieces.TestPiece')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestResult')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('latitude', models.CharField(blank=True, max_length=15, null=True)),
                ('longitude', models.CharField(blank=True, max_length=15, null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, dim=3, editable=False, geography=True, null=True, srid=4326)),
                ('postcode', models.CharField(blank=True, max_length=10, null=True)),
                ('exact', models.BooleanField(default=False, help_text='True if latitude and longitude is for a building, rather than a town')),
                ('notes', models.TextField(blank=True, null=True)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='regions.Region')),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='VenueLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('mapper', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='VenueMapper', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='VenueOwner', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contests.Venue')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VenueAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('name', models.CharField(help_text='Name of Venue Alias', max_length=200)),
                ('alias_start_date', models.DateField(blank=True, help_text='Start date for this alias (yyyy-mm-dd)', null=True)),
                ('alias_end_date', models.DateField(blank=True, help_text='End date for this alias (yyyy-mm-dd)', null=True)),
                ('lastChangedBy', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='VenueAliasLastChangedBy', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='VenueAliasOwner', to=settings.AUTH_USER_MODEL)),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.Venue')),
            ],
            options={
                'verbose_name_plural': 'Venue aliases',
                'db_table': 'venues_venuealias',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='contestevent',
            name='contest_type_override_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contests.ContestType'),
        ),
        migrations.AddField(
            model_name='contestevent',
            name='lastChangedBy',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestEventLastChangedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contestevent',
            name='original_owner',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ContestEventOriginalOwner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contestevent',
            name='owner',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestEventOwner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contestevent',
            name='test_piece',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='pieces.TestPiece'),
        ),
        migrations.AddField(
            model_name='contestevent',
            name='venue_link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='contests.Venue'),
        ),
        migrations.AddField(
            model_name='contestachievementaward',
            name='contest_event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contests.ContestEvent'),
        ),
        migrations.AddField(
            model_name='contest',
            name='contest_type_link',
            field=models.ForeignKey(default=12, help_text='This controls the draw and points fields shown when adding/editing an event for this contest', on_delete=django.db.models.deletion.CASCADE, to='contests.ContestType'),
        ),
        migrations.AddField(
            model_name='contest',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='contests.ContestGroup'),
        ),
        migrations.AddField(
            model_name='contest',
            name='lastChangedBy',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestLastChangedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contest',
            name='owner',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ContestOwner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contest',
            name='qualifies_for',
            field=models.ForeignKey(blank=True, help_text='Finals for this contest', null=True, on_delete=django.db.models.deletion.CASCADE, to='contests.Contest'),
        ),
        migrations.AddField(
            model_name='contest',
            name='region',
            field=models.ForeignKey(blank=True, help_text='Region bands are drawn from.  Leave blank for non-region limited contests.', null=True, on_delete=django.db.models.deletion.CASCADE, to='regions.Region'),
        ),
        migrations.AddField(
            model_name='contest',
            name='section',
            field=models.ForeignKey(blank=True, help_text='Section for contest.  Leave blank if not applicable or contest is not nationally graded', null=True, on_delete=django.db.models.deletion.CASCADE, to='sections.Section'),
        ),
        migrations.AddField(
            model_name='contest',
            name='tags',
            field=models.ManyToManyField(blank=True, to='tags.ContestTag'),
        ),
    ]
