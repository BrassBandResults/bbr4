# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-08-15 19:52
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('badges', '0001_initial'),
        ('classifieds', '0001_initial'),
        ('bands', '0001_initial'),
        ('contests', '0001_initial'),
        ('regions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('ip', models.GenericIPAddressField(help_text='The ip address of the user requesting password reset')),
                ('useragent', models.CharField(help_text='Details of the browser the user used to request the reset', max_length=512)),
                ('key', models.CharField(help_text='The key passed to the client to reset the password.  Generated randomly', max_length=50)),
                ('username', models.CharField(help_text='The user to reset when the key is passed in on the url', max_length=50)),
                ('used', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalContestHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('status', models.CharField(choices=[('accepted', 'Accepted'), ('pending', 'Pending')], default='accepted', max_length=10)),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='classifieds.PlayerPosition')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestResult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-result__contest_event__date_of_event'],
            },
        ),
        migrations.CreateModel(
            name='PersonalContestHistoryDateRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('imported', models.BooleanField(default=False)),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bands.Band')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start_date', 'user__username'],
            },
        ),
        migrations.CreateModel(
            name='PointsAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('type', models.CharField(max_length=25)),
                ('serial', models.IntegerField()),
                ('points_awarded', models.IntegerField()),
                ('old_points', models.IntegerField()),
                ('new_points', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('notified', models.BooleanField(default=False, help_text='True if user has been notified of badge')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='badges.Badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserIpAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('count', models.IntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField()),
                ('username', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('type', models.CharField(max_length=100)),
                ('name_match', models.CharField(blank=True, help_text='If not empty, only matches where the name of the thing being notified contains this string, case insensitive', max_length=50, null=True)),
                ('notify_type', models.CharField(choices=[('own', 'Send if Owner only'), ('notown', 'Send if another user changes something you own'), ('all', 'Send Always')], default='all', max_length=6)),
                ('enabled', models.BooleanField(default=True)),
                ('notify_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('points', models.IntegerField(default=0)),
                ('display_name', models.CharField(blank=True, max_length=30)),
                ('contest_history_visibility', models.CharField(blank=True, max_length=10, null=True)),
                ('enhanced_functionality', models.BooleanField(default=False)),
                ('pro_member', models.BooleanField(default=False)),
                ('superuser', models.BooleanField(default=False)),
                ('regional_superuser', models.BooleanField(default=False)),
                ('rankings_access', models.CharField(choices=[('N', 'Normal Free'), ('B', 'Basic Paid'), ('F', 'Full Paid')], default='N', max_length=1)),
                ('old_rankings_access', models.CharField(blank=True, max_length=1, null=True)),
                ('rankings_log', models.TextField(blank=True, default='')),
                ('paypal_id', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('new_email_required', models.BooleanField(default=False)),
                ('stripe_token', models.CharField(blank=True, max_length=30, null=True)),
                ('stripe_email', models.CharField(blank=True, max_length=100, null=True)),
                ('stripe_customer', models.CharField(blank=True, max_length=100, null=True)),
                ('max_profile_count', models.IntegerField(default=1)),
                ('band_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='BandOne', to='bands.Band')),
                ('band_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='BandTwo', to='bands.Band')),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='classifieds.PlayerPosition')),
                ('position_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='PositionOne', to='classifieds.PlayerPosition')),
                ('position_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='PositionTwo', to='classifieds.PlayerPosition')),
                ('regional_superuser_region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='regions.Region')),
                ('regional_superuser_regions', models.ManyToManyField(blank=True, related_name='regions', to='regions.Region')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='UserTalk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('created', models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ('text', models.TextField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
